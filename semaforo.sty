<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code Display</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        pre {
            background-color: #2e3440;
            color: #d8dee9;
            padding: 20px;
            border-radius: 5px;
            overflow-x: auto;
        }
        code {
            font-family: 'Courier New', Courier, monospace;
        }
    </style>
</head>
<body>
    <h1>Código Assembly para Controle de Semáforo</h1>
    <pre><code>.include "C:\Users\dave1\Documents\SimulIDE\avra-master\avra-master\includes\m88def.inc"

; Definindo qual pino do ATmega vai para qual LED
.equ GREEN_LED_P = PB2
.equ RED_LED_P = PB1
.equ GREEN_LED = PB5
.equ YELLOW_LED = PB4
.equ RED_LED = PB3

; Definindo o tempo de espera para o ATmega realizar os delays de cada LED (**valores abaixo utilizando frequência de 3MHz**)
.equ GREEN_TIME = 225  ; Aproximadamente 20 segundos 
.equ YELLOW_TIME = 90  ; Aproximadamente 7 segundos ---- devido aos ciclos de clock do ATmega88, o tempo máximo disponível para programação é de "255" o que limita ao máximo aproximadamente 15s, quando programado em 8MHz.
.equ RED_TIME = 130    ; Aproximadamente 12 segundos

; Definindo registradores para cada atividade, e nomeando suas variáveis
.def temp = r16        ; o registrador r16 (nomeado como a variável "temp") é utilizado para registrar "data" ou, em tradução literal "arquivos temporários", sendo assim podemos classificá-lo como um registrador de propósito geral.
.def counter = r17     ; o registrador r17 (nomeado como a variável "counter") é utilizado para contabilizar cada ação e interação entre os componentes, assim como contabilizar cada ciclo de loop, sendo assim podemos classificá-lo como um registrador contador.
.def delay_lo = r24    ; Usar r24:r25 para sbiw de acordo com warning do MSYS2 ("delay_lo" e "delay_hi" são variáveis definidas para uso futuro, principalmente no tempo de variação dos delays definidos)
.def delay_hi = r25    ; "delay_lo" armazena o menor valor de byte do delay de 16 bits utilizado futuramente, enquanto "delay_hi" armazena o maior valor. Ao tentar compilar o código no MSYS2 o programa retornou um erro requisitando que os registradores utilizados para sbiw fossem consecutivos.

; Configura o registrador de direção dos dados para os LEDs como saída
setup:
    ldi temp, (1<<GREEN_LED)|(1<<YELLOW_LED)|(1<<RED_LED) | (1<<RED_LED_P) | (1<<GREEN_LED_P) ; cada () representa um led diferente, onde "_P" representa os leds utilizados no semáforo de pedestres. O valor 1 representa o binário/estado do led, ou seja, ligado. "|" representa um operador "OR" comum
    out DDRB, temp ; configura os pinos "B" como pinos de saída
    rjmp main ; o comando "rjmp" redireciona o programa para a seção "main"/principal do código

; Loop principal
main:
    ; Liga o LED verde (carro) e LED vermelho (pedestre)
    ldi temp, (1<<GREEN_LED) | (1<<RED_LED_P)
    out PORTB, temp
    rcall delay ; chama a função "delay"
    
    ; Desliga o LED verde (carro)
    cbi PORTB, GREEN_LED ; o comando "cbi" limpa os valores definidos nesse bit, nesse caso retirando o valor 1 do bit da porta do led verde
    
    ; Liga o LED amarelo (carro) e mantém LED vermelho (pedestre)
    ldi temp, (1<<YELLOW_LED)| (1<<RED_LED_P)
    out PORTB, temp
    rcall delay_yellow ; chama a função "delay_yellow" referente ao led amarelo
    
    ; Desliga o LED amarelo (carro)
    cbi PORTB, YELLOW_LED
    
    ; Liga o LED vermelho (carro) e LED verde (pedestre)
    ldi temp, (1<<RED_LED) | (1<<GREEN_LED_P) ; acende o led vermelho (para carros) e o verde (para pedestres)
    out PORTB, temp
    rcall delay_red
    
    ; Desliga o LED vermelho (carro)
    cbi PORTB, RED_LED
    
    ; Desliga o LED verde (pedestre)
    cbi PORTB, GREEN_LED_P
    
    rjmp main

; Rotina de delay para o LED verde
delay:
    ldi counter, GREEN_TIME
delay_loop:
    ldi delay_lo, LOW(0xFFFF)    ; a função "LOW(0xFFFF)" chama o byte de menor valor dentre os 16bits.
    ldi delay_hi, HIGH(0xFFFF)   ; a função "HIGH(0xFFFF)" chama o byte de maior valor dentre os 16bits.
delay_loop_inner:
    sbiw delay_lo, 1
    brne delay_loop_inner
    dec counter ; decrementa o contador "counter"
    brne delay_loop ; verifique se o contador é igual a 0, caso negativo, executa a "ret", retornando para o loop do led.
    ret

; Rotina de delay para o LED amarelo
delay_yellow:
    ldi counter, YELLOW_TIME 
delay_yellow_loop:
    ldi delay_lo, LOW(0xFFFF)
    ldi delay_hi, HIGH(0xFFFF)
delay_yellow_inner:
    sbiw delay_lo, 1
    brne delay_yellow_inner
    dec counter
    brne delay_yellow_loop
    ret

; Rotina de delay para o LED vermelho
delay_red:
    ldi counter, RED_TIME
delay_red_loop:
    ldi delay_lo, LOW(0xFFFF)
    ldi delay_hi, HIGH(0xFFFF)
delay_red_inner:
    sbiw delay_lo, 1
    brne delay_red_inner
    dec counter
    brne delay_red_loop
    ret
</code></pre>
</body>
</html>
